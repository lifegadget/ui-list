{{#demo-css}}
<h3>Component::<code>ui-row-item</code></h3>

<h3>Overview</h3>
<row>
  <description class="wide">
    <p>
      The <prop>ui-row-item</prop> supports the any tabular data representation (such as
      the <prop>ui-tabular-list</prop>). It's function is primarily structural as the formatting
      will more likely be dictated by the "columns" which are defined as <b>aspect</b>s.
    </p>
    <p>
      The column's definition is done through the <prop>columns</prop> property on the item (for the inline item
      definition). If you want further control you can do whatever you like using the block forms of the controls. See
      below an example of this.
    </p>
    <p>
      In the examples below try looking at the ember inspector to understand the component structure that is
      being created with the <i>inline</i> components (the block components are self-explanatory).
    </p>
</description>
  <code>
    <img src='images/row-item-structure.png' width='100%' />
  </code>
</row>

<br/>
<h3>Examples</h3>
<row>
  <widget>
    {{ui-row-item
      one='foo'
      two='bar'
      three='baz'
    }}
  </widget>
  <code>
    {{display-component componentName='ui-row-item'
      one='foo'
      two='bar'
      three='baz'
    }}
  </code>
  <description>
    <h4>Basic Inline</h4>

    For every <i>property</i> you set on a <prop>ui-row-item</prop> you will get a column (aka,
    <prop>ui-column-pane</prop>). This is aspect pane will in turn create a <i>cell</i> aspect
    (aka, <prop>ui-cell-aspect</prop>) which displays the
  </description>
</row>

<row>
  <widget>
    {{ui-row-item
      one='foo'
      two='bar'
      three='baz'
      columns='one,two'
    }}
  </widget>
  <code>
    {{display-component componentName='ui-row-item'
      one='foo'
      two='bar'
      three='baz'
      columns='one,two'
    }}
  </code>
  <description>
    <h4>Basic Inline with simple column definition</h4>

    The <prop>columns</prop> property is used to configure the properties that an item should
    build out. In this case we have a rather simple configuration but the one thing it is dictating
    is that there are only two columns so in this case the property <prop>three</prop> is ignored.
  </description>
</row>

<row>
  <widget>
    {{ui-row-item
      one='foo'
      two='bar'
      three=3
      columns=columns
    }}
  </widget>
  <code>
    {{display-component componentName='ui-row-item'
      one='foo'
      two='bar'
      three=3
      columns=':columns'
    }}
    <br/>

  </code>
  <description>
    <h4>Basic Inline with advanced config</h4>

    In the previous example we just stated which properties from the "item" should be considered columns. This can be
    useful by itself but often we'll want to have greater specificity and this achieved by providing the item a
    <prop>columns</prop> hash of properties.
  </description>
</row>
<row>
  <widget>&nbsp;</widget>
  <description>
    where <prop>columns</prop> is defined as:
<pre><code class="language-js">columns = [
  {id: 'one', alignment: 'left', name: 'One'},
  {id: 'two', alignment: 'center', name: 'Two'},
  {id: 'three', alignment: 'right', type: 'number', precision: 2, name: 'Three'}
];</code></pre>

  </description>
</row>


{{/demo-css}}
