<h3>Component::<code>ui-list</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>ui-list</code> is the default list container. It does nothing more than list items with very basic styling for the container itself,
        it's main function is to proxy properties into the items it contains as well manage actions coming out of them.
    </desc>
    <desc>
      To understand <code>ui-list</code> as either an inline or block component you must understand it's parameters in terms of their scope:
    </desc>
</div>
{{! ------------------------------------------------------------------------------------------ }}
<h4>Example</h4>

<div class="examples">
    <table class="row">
        <tr>
            <td class="col-xs-12 col-sm-4 text-center align-top">
              <p>&nbsp;</p>
                {{#if enableStaticChooser}}
                  {{ui-list
                    items=items
                    filter=listFilter
                    map=map
                    size=size
                    mood=mood
                    style=style
                    defaultIcon=defaultIcon
                    compressed=compressed
                    squeezed=squeezed
                    sort=sortBy
                    sortAscending=sortAscending
                  }}
                {{else}}
                  {{ui-list
                    items=items
                    filter=listFilter
                    map=map
                    size=size
                    mood=sillyLogic
                    style=style
                    defaultIcon=defaultIcon
                    compressed=compressed
                    squeezed=squeezed
                    sort=sortBy
                    sortAscending=sortAscending
                  }}
                {{/if}}
            </td>
{{! ------------------------------------------------------------------------------------------ }}
            <td class="hidden-xs col-sm-8">
                <heading>CONTAINER PROPERTIES</heading>

                {{#code-block language="js"}}
items: [
  {foo: "Groceries", bar: "hungry, hungry, hippo", icon: "cutlery", badge: 6},
  {foo: "Hospital", bar: "visit sick uncle Joe", icon: "ambulance", badge: 1},
  {foo: "Pub", bar: "it's time for some suds", icon: "beer"},
  {foo: "Took Cab", bar: "took a cab, drinking not driving", icon: "cab"},
  {foo: "Had Coffee", bar: "need to chill out after that beer", icon: "coffee"}
],
map: {
  title: 'foo',
  subHeading: 'bar'
},
                {{/code-block}}
                {{code-reference ref=sillyLogic}}

                <heading>HANDLEBARS TEMPLATE</heading>

                {{#code-block language="handlebars" poll=100}}
\{{ui-list
  items=items
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"{{#if compressed}}
  compressed=true{{/if}}{{#if squeezed}}
  squeezed=true{{/if}}{{#if sortBy}}
  sort="{{sortBy}}" {{else}}
  {{/if}}

}}
                {{/code-block}}

            </td>
        </tr>
    </table>
</div>
{{! ------------------------------------------------------------------------------------------------------------------------- }}
<p>&nbsp;</p>
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                List Size: <br/>
                {{ui-buttons cardinality='1:1' buttons='tiny,small,default,large,huge' value=size size='small' defaultValue='default'}}<br/>
                Vertically Compressed: {{ui-toggle-button value=compressed on='compressed' off='normal' size='small'}}<br/>
                Horizontally Squeezed: {{ui-toggle-button value=squeezed on='squeezed' off='normal' size='small'}}<br/>
                Filter: {{ui-toggle-button value=isFiltered on='Only where Badge exists' off='No Filter' defaultValue=false size='small'}}
            </column>
            <column>
                Mood: <br/>
                {{ui-buttons cardinality='1:1' buttons='static,sillyLogic' value=moodStrategy size='small' stretch=true}}<br/>
                {{#if enableStaticChooser}}
                Static Moods:<br/>
                  {{ui-buttons cardinality='1:1' buttons='default,success,info,warning,error' value=mood disable=disableStaticChooser size='small' defaultValue='default'}}
                {{/if}}
             </column>
            <column>
                Skin / Style Family:<br/>
                {{ui-buttons cardinality='1:1' buttons='default,plus,flat,simple' value=style size='small' stretch=true}}<br/>
                Sort By:
                {{ui-toggle-button value=sortAscending toggleEffect='tada' onIcon='chevron-down' offIcon='chevron-up' on='' off=''}}<br/>
                {{ui-buttons cardinality='1:1' buttons='Natural:::null,Badge,Title' value=sortBy size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ------------------------------------------------------------------------------------------------------------------------- }}

<desc>
    <strong>Notes on ui-list example:</strong>
    <ul>
      <li>
        <strong>Mapping</strong>
        <ul>
          <li>maps can be set as a single has as demonstrated above using a "map" property, or</li>
          <li>
            maps can also be set on a property by property basis by prefixing the target name with "map". For instance, if you wanted to just
            map an input parameter of "foo" to the list property <code>title</code> then you could set \{{ui-list mapTitle='foo'}}
          </li>
        </ul>
      </li>
      <li>
        <strong>AspectPanes</strong>
        <ul>
          <li>Properties like <code>title</code>, <code>icon</code>, etc. are considered "aspectPanes"</li>
          <li>When setting these properties you can set them as a static value or a bound variable which resolves to a static/scalar value</li>
          <li>You can also pass in a function which will be passed to the item to resolve when the state of the item changes</li>
        </ul>
      </li>
      <li>
        <strong>List Properties</strong>
        <ul>
          <li>Properties like <code>mood</code>, <code>size</code>, etc. are properties which are owned by the list</li>
          <li>
            In all cases, though the properties are "owned" at the list level, that just means they are common to all item types and that
            they do <em>not</em> hold a discrete value for each "item".
          </li>
          <li>These properties -- like AspectPanes -- can be static/scalar values or functions.</li>
          <li>
            For properties like <code>size</code> and <code>style</code> it is typically expected that they are statically set as a scalar
            value whereas in contrast <code>mood</code> is very likely to be a function which is reacting to the state of the item.
          </li>
        </ul>
      </li>
    </ul>
</desc>


<h4>Ember Data</h4>
<desc>
  Considering a lot of data lists come from Ember-Data the example below loads all the data from above into a model called "Activity" and then works in precisely
  the same way. Check out the data in the Ember Inspector and play around with it to see it update:
</desc>

<examples>
  <widget class='wide'>
    {{#if enableStaticChooser}}
      {{ui-list
        items=model
        filter=listFilter
        map=map
        size=size
        mood=mood
        style=style
        defaultIcon=defaultIcon
        compressed=compressed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{else}}
      {{ui-list items=model.content map=map size=size mood=sillyLogic style=style defaultIcon=defaultIcon  compressed=compressed sort=sortBy filter=filterList sortAscending=sortAscending}}
    {{/if}}
  </widget>
  <sourcecode>
  {{#code-block language="handlebars" poll=100}}





\{{ui-list
  items=model.content
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"{{#if compressed}}
  compressed=true{{/if}}
}}






    {{/code-block}}
  </sourcecode>
</examples>

