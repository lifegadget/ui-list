{{#demo-css}}
<h3>Component::<code>ui-list</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <prop>ui-list</prop> is the default list container which all other list containers are derived from. It does nothing more than list items with very basic styling for the container itself,
        it's main function is to proxy properties into the items it contains as well manage actions coming out of them.
    </desc>
</div>
{{! ------------------------------------------------------------------------------------------ }}
<h4>Interactive Demo</h4>

<row>
  <widget class="wide">
      {{#if enableStaticChooser}}
        {{ui-list
          items=items
          filter=listFilter
          map=map
          size=size
          mood=mood
          skin=skin
          defaultIcon=defaultIcon
          compressed=compressed
          squeezed=squeezed
          sort=sortBy
          sortAscending=sortAscending
        }}
      {{else}}
        {{ui-list
          items=items
          filter=listFilter
          map=map
          size=size
          mood=sillyLogic
          skin=skin
          defaultIcon=defaultIcon
          compressed=compressed
          squeezed=squeezed
          sort=sortBy
          sortAscending=sortAscending
        }}
      {{/if}}
  </widget>
  <code>
    &nbsp;<br/>
    {{display-component componentName='ui-list'
      items=':items'
      filter=':listFilter'
      map=':map'
      size=size
      mood=':sillyLogic'
      skin=skin
      defaultIcon=defaultIcon
      compressed=compressed
      squeezed=squeezed
      sort=sortBy
      sortAscending=sortAscending
    }}
  </code>
  <description>
    <h4>Inline Syntax</h4>
    <p>
      This list container uses the compact <i>inline</i> syntax and passes in an array of data for the <i>items</i> which it would like to have rendered. The data structures passed in are:
    </p>
    <pre style="font-size:6pt">
items: [
  {foo: "Groceries", bar: "hungry, hungry, hippo", icon: "cutlery", badge: 6},
  {foo: "Hospital", bar: "visit sick uncle Joe", icon: "ambulance", badge: 1},
  {foo: "Pub", bar: "it's time for some suds", icon: "beer"},
  {foo: "Took Cab", bar: "took a cab, drinking not driving", icon: "cab"},
  {foo: "Had Coffee", bar: "need to chill out after that beer", icon: "coffee"}
],
map: {
  title: 'foo',
  subHeading: 'bar'
},
sillyLogic() {
  let badge = item.get('badge');
  let moodiness = badge && badge > 5 ? 'error' : 'warning';
  return badge ? moodiness : null;
}
    </pre>
  </description>
</row>

{{! ------------------------------------------------------------------------------------------------------------------------- }}
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                List Size: <br/>
                {{ui-buttons cardinality='1:1' buttons='tiny,small,default,large,huge' value=size size='small' defaultValue='default'}}<br/>
                Vertically Compressed: {{ui-toggle-button value=compressed on='compressed' off='normal' size='small'}}<br/>
                Horizontally Squeezed: {{ui-toggle-button value=squeezed on='squeezed' off='normal' size='small'}}<br/>
                Filter: {{ui-toggle-button value=isFiltered on='Only where Badge exists' off='No Filter' defaultValue=false size='small'}}
            </column>
            <column>
                Mood: <br/>
                {{ui-buttons cardinality='1:1' buttons='static,sillyLogic' value=moodStrategy size='small' stretch=true}}<br/>
                {{#if enableStaticChooser}}
                Static Moods:<br/>
                  {{ui-buttons cardinality='1:1' buttons='default,success,info,warning,error' value=mood disable=disableStaticChooser size='small' defaultValue='default'}}
                {{/if}}
             </column>
            <column>
                Skin / Style Family:<br/>
                {{ui-buttons cardinality='1:1' buttons='default,plus,flat,simple' value=skin size='small' stretch=true}}<br/>
                Sort By:
                {{ui-toggle-button value=sortAscending toggleEffect='tada' onIcon='chevron-down' offIcon='chevron-up' on='' off=''}}<br/>
                {{ui-buttons cardinality='1:1' buttons='Natural:::null,Badge,Title' value=sortBy size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ------------------------------------------------------------------------------------------------------------------------- }}

<row>
  <widget class='wide'>
    {{#ui-list
      filter=listFilter
      size=size
      mood=mood
      skin=skin
      compressed=compressed
      squeezed=squeezed
      sort=sortBy
      sortAscending=sortAscending
      as |list|
    }}
      {{#each items as |item|}}
        {{ui-item title=item.foo subHeading=item.bar icon=item.icon badge=item.badge list=list}}
      {{/each}}
    {{/ui-list}}
  </widget>
  <code class='wide'>
    &nbsp;<br/>
    {{#display-component componentName='ui-list' as='list'
      filter=listFilter
      size=size
      mood=mood
      skin=skin
      compressed=compressed
      squeezed=squeezed
      sort=sortBy
      sortAscending=sortAscending
    }}
    {{#display-component componentName='each' _target='items' as='item' _indent=1}}
        {{display-component componentName='ui-item' _indent=2 title=':item.foo' subHeading=':item.bar' icon=':item.icon' badge=':item.badge' list=':list'}}
    {{/display-component}}

    {{/display-component}}
  </code>
  <description>
    <h4>Block Format</h4>
    <p>
      The block format allows you full control on how you'd like to style your items. If you use the <prop>ui-item</prop> or derived classes then passing the list's block parameter into the <prop>list</prop> property on the item will ensure that messaging between item and list is maintained.
    </p>
  </description>
</row>

{{!-- <desc>
    <strong>Notes on ui-list example:</strong>
    <ul>
      <li>
        <strong>Mapping</strong>
        <ul>
          <li>maps can be set as a single has as demonstrated above using a "map" property, or</li>
          <li>
            maps can also be set on a property by property basis by prefixing the target name with "map". For instance, if you wanted to just
            map an input parameter of "foo" to the list property <code>title</code> then you could set \{{ui-list mapTitle='foo'}}
          </li>
        </ul>
      </li>
      <li>
        <strong>AspectPanes</strong>
        <ul>
          <li>Properties like <code>title</code>, <code>icon</code>, etc. are considered "aspectPanes"</li>
          <li>When setting these properties you can set them as a static value or a bound variable which resolves to a static/scalar value</li>
          <li>You can also pass in a function which will be passed to the item to resolve when the state of the item changes</li>
        </ul>
      </li>
      <li>
        <strong>List Properties</strong>
        <ul>
          <li>Properties like <code>mood</code>, <code>size</code>, etc. are properties which are owned by the list</li>
          <li>
            In all cases, though the properties are "owned" at the list level, that just means they are common to all item types and that
            they do <em>not</em> hold a discrete value for each "item".
          </li>
          <li>These properties -- like AspectPanes -- can be static/scalar values or functions.</li>
          <li>
            For properties like <code>size</code> and <code>style</code> it is typically expected that they are statically set as a scalar
            value whereas in contrast <code>mood</code> is very likely to be a function which is reacting to the state of the item.
          </li>
        </ul>
      </li>
    </ul>
</desc>


<h4>Ember Data</h4>
<desc>
  Considering a lot of data lists come from Ember-Data the example below loads all the data from above into a model called "Activity" and then works in precisely
  the same way. Check out the data in the Ember Inspector and play around with it to see it update:
</desc> --}}

{{!-- <examples>
  <widget class='wide'>
    {{#if enableStaticChooser}}
      {{ui-list
        items=model
        filter=listFilter
        map=map
        size=size
        mood=mood
        style=style
        defaultIcon=defaultIcon
        compressed=compressed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{else}}
      {{ui-list items=model.content map=map size=size mood=sillyLogic style=style defaultIcon=defaultIcon  compressed=compressed sort=sortBy filter=filterList sortAscending=sortAscending}}
    {{/if}}
  </widget>
  <sourcecode>
  {{#code-block language="handlebars" poll=100}}





\{{ui-list
  items=model.content
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"{{#if compressed}}
  compressed=true{{/if}}
}}






    {{/code-block}}
  </sourcecode>
</examples> --}}

{{/demo-css}}