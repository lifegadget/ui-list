{{#demo-css}}
<h3>Component::<code>ui-list</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <prop>ui-list</prop> is the default list container which all other list containers are derived from. It does nothing more than list items with very basic styling for the container itself,
        it's main function is to proxy properties into the items it contains as well manage actions coming out of them.
    </desc>
</div>
{{! ------------------------------------------------------------------------------------------ }}
<h4>Interactive Demo</h4>

<row>
  <widget class="wide">
    {{#if moodFunction}}
      {{ui-list
        items=items
        filter=listFilter
        map=map
        size=size
        mood=sillyLogic
        skin=skin
        defaultIcon=defaultIcon
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{else}}
      {{ui-list
        items=items
        filter=listFilter
        map=map
        size=size
        mood=staticMood
        skin=skin
        defaultIcon=defaultIcon
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{/if}}
  </widget>
  <code>
    &nbsp;<br/>
    {{#if moodFunction}}
      {{display-component componentName='ui-list'
        items=':items'
        filter=listFilter
        map=':map'
        size=size
        mood=sillyLogic
        skin=skin
        defaultIcon=defaultIcon
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{else}}
      {{display-component componentName='ui-list'
        items=':items'
        filter=listFilter
        map=':map'
        size=size
        mood=staticMood
        skin=skin
        defaultIcon=defaultIcon
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
      }}
    {{/if}}
  </code>
  <description>
    <h4>Inline Syntax</h4>
    <p>
      This list container uses the compact <i>inline</i> syntax and passes in an array of data for the <i>items</i> which it would like to have rendered. The data structures passed in are:
    </p>
    <pre style="font-size:6pt">
items: [
  {foo: "Groceries", bar: "hungry, hungry, hippo", icon: "cutlery", badge: 6},
  {foo: "Hospital", bar: "visit sick uncle Joe", icon: "ambulance", badge: 1},
  {foo: "Pub", bar: "it's time for some suds", icon: "beer"},
  {foo: "Took Cab", bar: "took a cab, drinking not driving", icon: "cab"},
  {foo: "Had Coffee", bar: "need to chill out after that beer", icon: "coffee"}
],
map: {
  title: 'foo',
  subHeading: 'bar'
},
sillyLogic(item) {
  let badge = item.get('badge');
  let moodiness = badge && badge > 5 ? 'error' : 'warning';
  return badge ? moodiness : null;
}
    </pre>
  </description>
</row>

{{! ------------------------------------------------------------------------------------------------------------------------- }}
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                List Size: <br/>
                {{radio-buttons buttons='tiny,small,default,large,huge' value=size size='small' defaultValue='default'}}<br/>
                Vertically Compressed: {{ui-toggle-button value=compressed on='compressed' off='normal' size='small'}}<br/>
                Horizontally Squeezed: {{ui-toggle-button value=squeezed on='squeezed' off='normal' size='small'}}<br/>
                Filter: {{ui-toggle-button value=isFiltered on='Only where Badge exists' off='No Filter' defaultValue=false size='small'}}
            </column>
            <column style='flex-basis: 300px'>
                Mood: <br/>
                {{radio-buttons buttons='static,sillyLogic' value=moodStrategy size='small'}}<br/>
                {{#if moodFunction}}
                  Mood is defined as a function at the list level (see above) which is proxied into each item. Because it is a function, it then engages dynamic observers to ensure that if inputs to the function change it is updated.
                {{else}}
                Static Moods:<br/>
                  {{radio-buttons buttons='default,success,info,warning,error' value=staticMood disable=disableStaticChooser size='small' defaultValue='default'}}
                {{/if}}
             </column>
            <column>
                Skin / Style Family:<br/>
                {{ui-buttons cardinality='1:1' buttons='default,plus,flat,simple' value=skin size='small' stretch=true}}<br/>
                Sort By:
                {{ui-toggle-button value=sortAscending toggleEffect='tada' onIcon='chevron-down' offIcon='chevron-up' on='' off=''}}<br/>
                {{ui-buttons cardinality='1:1' buttons='Natural:::null,Badge,Title' value=sortBy size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ------------------------------------------------------------------------------------------------------------------------- }}

<row>
  <widget class='wide'>
  {{#if moodFunction}}
      {{#ui-list
        filter=listFilter
        size=size
        mood=sillyLogic
        skin=skin
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
        as |list|
      }}
        {{#each items as |item|}}
          {{ui-item title=item.foo subHeading=item.bar icon=item.icon badge=item.badge list=list}}
        {{/each}}
      {{/ui-list}}
  {{else}}
      {{#ui-list
        filter=listFilter
        size=size
        mood=staticMood
        skin=skin
        compressed=compressed
        squeezed=squeezed
        sort=sortBy
        sortAscending=sortAscending
        as |list|
      }}
    {{#each items as |item|}}
      {{ui-item title=item.foo subHeading=item.bar icon=item.icon badge=item.badge list=list}}
    {{/each}}
  {{/ui-list}}
  {{/if}}

  </widget>
  <code class='wide'>
    &nbsp;<br/>
    {{#display-component componentName='ui-list' as='list'
      filter=listFilter
      size=size
      mood='mood'
      skin=skin
      compressed=compressed
      squeezed=squeezed
      sort=sortBy
      sortAscending=sortAscending
    }}
    {{#display-component componentName='each' _target='items' as='item' _indent=1}}
        {{display-component componentName='ui-item' _indent=2 title=':item.foo' subHeading=':item.bar' icon=':item.icon' badge=':item.badge' list=':list'}}
    {{/display-component}}

    {{/display-component}}
  </code>
  <description>
    <h4>Block Format</h4>
    <p>
      The block format allows you full control on how you'd like to style your items. If you use the <prop>ui-item</prop> or derived classes then passing the list's block parameter into the <prop>list</prop> property on the item will ensure that messaging between item and list is maintained.
    </p>
  </description>
</row>

<h4>Heritable Properties and Sensitivity</h4>
<p>
  This is probably a terrible name but didn't have a lot of time to think about it. Basically it's a set of properties which are owned by the item but the list will take over responsibility for any items which it manages. Examples are <prop>mood</prop>, <prop>size</prop>, <prop>skin</prop>, and <prop>squeezed</prop>.
</p>
<p>
  In most regards this is a <prop>ui-item</prop> discussion rather than a <prop>ui-list</prop> one but it is mentioned here for one reason ... each of these properties can be a discrete value or a function which determines what the value should be. The <b>sillyLogic</b> example is illustrative of this. When a function is detected it then uses "sensitivities" properties. These sensitivities are the properties that the function is observing to calculate its value. So in the case of sillyLogic we're triggering a mood off of the <i>badge</i> number. The configuration for this would be:

  <code>moodSensitivities=['badge']</code>

  You'll notice that we didn't actually do that but that's because any function is <i>by default</i> given the following observable properties: <prop>mood</prop>, <prop>title</prop>, <prop>subHeading</prop>, and <prop>badge</prop>.
</p>

{{/demo-css}}