{{#demo-css}}
<h3>Component::<code>ui-tabular-list</code></h3>

<h3>Overview</h3>
<row>
  <description>
    <p>
      A tabular list contains rows, columns, and cells. From a component structure standpoint,
      the diagram to right demonstrates this relationship.
    </p>
    <p>
      Like other <prop>ui-list</prop> components <prop>ui-tabular-list</prop> is meant to be used
      as both an <i>inline</i> and <i>block</i> component.
    </p>
  </description>
  <description class="wide">
    <img src='images/tabular-list.png' width='100%' />
  </description>
</row>
<br/>
<h3>Examples</h3>
<row>
  <widget class='wide'>
    {{ui-tabular-list
      columns=basic
      rows=appointments
      onChange='onChange'
      onClick='onClick'
      onHover='onHover'
    }}
  </widget>
  <description>
    <h4>Basic Inline</h4>

    <p>
      In this example the list is created with only two parameters: <prop>columns</prop> and <prop>rows</prop>. The
      <prop>rows</prop> property points to an ember-data array from the model 'appointment' (you can check out its
      values in the Ember Inspector now if you like). The <prop>columns</prop> property defines which columns to
      display and provides meta-information to better present them.
    </p>
    <p>
      The template would like this:
    </p>
<pre><code class="language-handlebars">\{{ui-tabular-list columns=columns rows=appointments}}</code></pre>
    <p>
      The <prop>columns</prop> property is:
    </p>
<pre><code class="language-js">columns = [
  {id:'firstName', name:'First Name', isSortable: true},
  {id:'lastName', name:'Last Name', isSortable: true},
  {id:'howMany', name:'Quantity', type:'number', format: {showCommas: true} },
  {id:'when', name:'When', type:'date', format:'toNow', horizontal: 'center'},
];</code></pre>
<p>
  and appointments is simply a <prop>findAll</prop> from ember-data:
</p>
<pre><code class="language-js">appointments = computed(function() {
  return this.store.findAll('appointment');
});</code></pre>

  </description>
</row>

<row>
  <widget class='wide'>
    {{ui-tabular-list
      columns=advanced
      rows=appointments
      limit=5
      offset=0
      onChange='onChange'
      onClick='onClick'
      onHover='onHover'
    }}
  </widget>
  <description>
    <h4>Beyond the Basics</h4>

    <p>
      In this follow-on example we're first demonstrating the use of the <b>limit</b> and <b>offset</b> properties
      which in this case are limiting the displayed table to 5 rows at a time. As soon as you set the limit
      you'll also notice that the <prop>ui-pagination-control</prop> has been added to the canvas to help
      navigating between "pages".
    </p>
    <p>
      In addition, we're also demontrating how easy it is to add a "selection" checkbox
      and an action button(s) which trigger with a row level context. In both cases we swap out the
      <i>cell</i> aspect with a specialised aspect for the task (<i>selection</i> and <i>buttons</i> aspects
      repectively).
    </p>
    <p>
      The template would like this:
    </p>
<pre><code class="language-handlebars">\{{ui-tabular-list limit=5 offset=0 columns=columns rows=appointments}}</code></pre>
    <p>
      The <prop>columns</prop> property is:
    </p>
<pre><code class="language-js">columns = [
  {id:'id', hidden:true},
  {id:'firstName', name:'First Name', isSortable: true},
  {id:'lastName', name:'Last Name', isSortable: true},
  {id:'action', name:'Action', type:'buttons', value: ['do-it'], format: {size: 'small', mood:'success', icon: 'arrow-circle-o-right'}, horizontal: 'center'}
];</code></pre>
<p>
  and appointments code remains the same:
</p>
<pre><code class="language-js">appointments = computed(function() {
  return this.store.findAll('appointment');
});</code></pre>

  </description>
</row>

<row>
  <widget class='wide'>
    {{ui-tabular-list
      columns=statusColumns
      rows=appointments
      onChange='onChange'
      onClick='onClick'
    }}
  </widget>
  <description>
    <h4>Stylish Features</h4>

    <p>
      Now let's look at some dynamic styling we can apply to a column.
    </p>
    <p>
      The template would like this:
    </p>
<pre><code class="language-handlebars">\{{ui-tabular-list limit=5 offset=0 columns=columns rows=appointments}}</code></pre>
    <p>
      The <prop>columns</prop> property is:
    </p>
<pre><code class="language-js">columns = [
  {id:'firstName', name:'First Name', isSortable: true},
  {id:'status', name:'Status - f()', class=classyFunction},
  {id:'status', name:'Status - map', class=classyMap}
];
</code></pre>
<p>
  same appointments code, but we've added a <code>classyFunction</code> definition as well as a <code>classyMap</code> mapper object:
</p>
<pre><code class="language-js">appointments = computed(function() {
  return this.store.findAll('appointment');
});
classyFunction(context) {
  if(get(context,'value').substr(-3) === 'ing') {
    return 'label label-warning';
  } else {
    return 'label label-success';
  }
};
classyMap = {
  executed: 'label label-success',
  verifying: 'label label-warning',
  executing: 'label label-danger'
};
</code></pre>

  </description>
</row>
{{/demo-css}}
