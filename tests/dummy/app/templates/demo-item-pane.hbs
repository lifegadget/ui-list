{{#demo-css}}
<h3>Component::<code>ui-item-pane</code></h3>

<h4>Overview</h4>
<row>
  <description>
    <p>
      A <i>pane</i> is a structural element of an <i>item</i> component and also represents a container for one or more <prop>aspects</prop>. If you're using the inline instantiation of an item component then you'll never really need to directly place these onto a template as the item will do that for you. If, however, you're using the block format than leveraging <i>panes</i> is a good way to stay within best practice and benefit from higher level container interaction.
    </p>
  </description>
</row>
<row>
  <widget class='wide'>
    {{#ui-item height='300px' as |item|}}
      {{#ui-item-pane orient=orient horizontal=horizontal vertical=vertical name=name}}
        <span class="aspect">a1</span>
        <span class="aspect">a2</span>
      {{/ui-item-pane}}
      {{#ui-item-pane orient=orient horizontal=horizontal vertical=vertical}}
        <span class="aspect">b1</span>
        <span class="aspect">b2</span>
        <span class="aspect">b3</span>
      {{/ui-item-pane}}
      {{#ui-item-pane orient=orient horizontal=horizontal vertical=vertical}}
        <span class="aspect">c1</span>
        <span class="aspect">c2</span>
      {{/ui-item-pane}}
    {{/ui-item}}
  </widget>
  <code>
    {{#display-component componentName='ui-item' as='item'}}
      {{#display-component _indent=1 componentName='ui-item-pane' item=':item' orient=orient horizontal=horizontal vertical=vertical name=name}}
        {{#html-tag tag='span' _indent=2}}a1{{/html-tag}}
        {{#html-tag tag='span' _indent=2}}a2{{/html-tag}}
      {{/display-component}}
      {{#display-component _indent=1 componentName='ui-item-pane' item=':item' orient=orient horizontal=horizontal vertical=vertical}}
       {{#html-tag tag='span' _indent=2}}b1{{/html-tag}}
       {{#html-tag tag='span' _indent=2}}b2{{/html-tag}}
       {{#html-tag tag='span' _indent=2}}b3{{/html-tag}}
     {{/display-component}}
      {{#display-component _indent=1 componentName='ui-item-pane' item=':item' orient=orient horizontal=horizontal vertical=vertical}}
        {{#html-tag tag='span' _indent=2}}c1{{/html-tag}}
        {{#html-tag tag='span' _indent=2}}c2{{/html-tag}}
      {{/display-component}}
    {{/display-component}}
  </code>
  <description>
    <h4>Naming</h4>
      <p>
        Panes should be named as that will allow containers to refer to the pane by name. Naming it will also give it a unique css class that can be used for more detailed styling. The css name will be <css>\{{name}}-pane</css>.
        <controls>
          <control>
            <span class='name'>name</span>
            <span>{{text-input value=name placeholder='add name' maxWidth='200px'}}</span>
          </control>
        </controls>
      </p>
    <h4>Orientation</h4>
    <p>
      The first key parameter is <prop>orient</prop> which indicates whether the pane will lay out "aspects" horizontally or vertically.
      <controls>
        <control>
          <span class='name'>orient</span>
          <span>{{radio-buttons value=orient defaultValue='horizontal' buttons='horizontal,vertical'}}</span>
        </control>
      </controls>
      The horizontal layout on first blush looks a little chaotic but it actually makes perfect sense; if you switch to vertical layout it will probably start to be more clear.
    </p>
    <h4>Alignment</h4>
    <p>
      Once the general orientation is set the next level of configuration is:
      <controls>
        <control>
          <span class='name'>vertical</span>
          <span>{{radio-buttons value=vertical buttons='null:::null,top,bottom,center,between,around,stretch' size='tiny'}}</span>
        </control>
        <control>
          <span class='name'>horizontal</span>
          <span>{{radio-buttons value=horizontal buttons='null:::null,left,right,center,between,around,stretch' size='tiny'}}</span>
        </control>
      </controls>
      You'll likely recognize some of the names as having come from <i>flexbox</i> and indeed that's not a coincidence as really this is just a convient way of getting a flexbox layout (the component does take out having to remember which is the primary and cross axis, etc.).
    </p>
    <note>
      <b>Note:</b> the <prop>ui-item</prop> that serves as the container in this example was given a fixed height so as to better illustrate the layout options.
    </note>
  </description>

</row>
{{/demo-css}}