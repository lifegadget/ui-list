<h3>Basic Inline</h3>
<row>
  <widget class='wide'>
    {{ui-tabular-list
      columns=basic
      rows=model
      gaps=gaps
    }}
  </widget>
  <description>
    <h4>Basic Inline</h4>

    <p>
      In this example the list is created with only two parameters: <prop>columns</prop> and <prop>rows</prop>. The <prop>rows</prop> property points to the underlying data source, the <prop>columns</prop> property defines how to paint this data onto the screen.
    </p>
    <p>
      While we may often define the columns in a more complete fashion with object hashes, it is often sufficient to simply specify the column definition inline with a template like this:
    </p>
<pre><code class="language-handlebars">\{{ui-tabular-list
  columns='{{columnStringDefinition}}'
  rows=model
}}</code></pre>
    <p>
      To help make the example config a little more explicit the picture below shows the structure the the inline syntax for column definition may include. This is a subset to options that can be defined by using a object hash but it should suffice for a lot of cases.
    </p>
    <p>
      <img src="/images/inline-column-definition.png" alt="" width=100% />
    </p>
    <p>
      <ul>
        <li>
          If all you provide is the "title" then that will be used as the columns name and then camelized as used as the property name to look for. In the example both "First Name" and "Last Name" follow this pattern.
        </li>
        <li>the next property -- <prop>my.property</prop> in the illustration -- allows you to be explicit about a path to the property you would like in the column. This property should be notated in dot-notation.</li>
        <li>
          The last two properties -- <b>type</b> and <b>format</b> -- are sort of a type/subtype relationshiop ... meaning the format is specific to the "type" of the variable. You don't need to specify either (it defaults to string) but if you want to specify a format you must specify the type.
        </li>
      </ul>
    </p>
<pre><code class="language-js">columns = [
  {id:'firstName', name:'First Name', isSortable: true},
  {id:'lastName', name:'Last Name', isSortable: true},
  {id:'howMany', name:'Quantity', type:'number', format: {showCommas: true} },
  {id:'when', name:'When', type:'date', format:'toNow', horizontal: 'center'},
];
</code></pre>
<p>
  and appointments is simply a <prop>findAll</prop> from ember-data:
</p>
<pre><code class="language-js">appointments = computed(function() {
  return this.store.findAll('appointment');
});</code></pre>

  </description>
</row>
