<h3>Component::<code>ui-item</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>ui-item</code> is the default list item. Like any item it responds to common/shared principles of:
        <ul>
          <li>Layout and property definition of <code>aspects</code> and <code>panes</code></li>
          <li>The relative <code>size</code> of each item</li>
          <li>The <code>style</code> family it belongs to</li>
          <li>It provides a CSS class for a <code>mood</code> and CSS styling for some common mood types</li>
          <li>Can be displayed as individual item or join up with other items as part of a <strong>list</strong>; it knows how to behave appropriately in either context</li>
          <li>Provides as set of aliases to map common <em>aspects</em> into the most likely <em>pane</em></li>
        </ul>

        This control does not have:
        <ul>
          <li>
            This being the most basic item-type it only responds with click action type (aka, no fancy slide out actions or other visual effects for
            these items).
          </li>
        </ul>
    </desc>
</div>

<h4>Basic Example</h4>
{{! ----------------------------------------------------------- }}
<examples>
    <widget>
        {{ui-item icon='envelope' title='Went Running' badgeRight=4}}
    </widget>
    <sourcecode>
        {{#code-block language="handlebars"}}
\{{ui-item icon='envelope' title='Went Running' badgeRight=4}}
        {{/code-block}}
    </sourcecode>
</examples>
{{! ----------------------------------------------------------- }}
<desc>
    Content -- when fully qualified for an item -- always has both an "aspect" and "pane". In the example above the <code>badgeRight</code> is a clear example
    of this. It states that it should use the "badge" aspect and place it into the "right" pane. In the other two examples we are noticing a feature of
    items ... where there are strong patterns as to where a particular piece of content (aka, an aspect) might go then an "alias" is setup to default the
    aspect type to a given pane. In this example the <code>title</code> reference is more explicitly <code>titleCenter</code> but since that almost always
    where the title will go an alias has been setup.
</desc>
<desc>
    The <code>ui-item</code> component has the following configuration:

    <ul>
      <li>
        Panes:
        <ul>
          <li>left, center, right</li>
        </ul>
      </li>
      <li>
        Aspects Aliases:
        <ul>
          <li>image (left), icon (left), title(center), subHeading(center), badge(right)</li>
        </ul>
      </li>
    </ul>
    of the item and with the basic <code>ui-item</code> component the only panes are "left", "right", and "center".
</desc>

<h4>Advanced Example: Mapping, Size, Skin, and Mood</h4>
{{! ----------------------------------------------------------- }}
<examples>
    <widget class="wide">
        <heading>With individual property mappers</heading>
        {{ui-item
					icon=toggledIcon
          image=image
					foo=foo
					mapTitle='foo'
					bar=toggledSubHeading
					mapSubHeading="bar"
					badge=toggledBadge
					size=size
					disabled=isDisabled
					style=style
					mood=_mood
          squeezed=squeezed
				}}
        <br/>

        <heading>With <code>map</code> property</heading>
        {{ui-item
					icon=toggledIcon
          image=image
					foo=foo
					bar=toggledSubHeading
          map=mapper
					badge=toggledBadge
					size=size
					disabled=isDisabled
          selected=isSelected
					style=style
					mood=_mood
          squeezed=squeezed
				}}

    </widget>
    <sourcecode>
        {{#code-block language="handlebars" poll=150}}
\{{ui-item {{#if toggledIcon}}icon='{{toggledIcon}}'{{/if}}
    foo='{{foo}}' {{#if toggledSubHeading}}
    mapTitle='foo'
    bar='{{toggledSubHeading}}'
    mapSubHeading='bar' {{/if}}
    {{#if toggledBadge}}badge={{toggledBadge}}
    {{/if}}style='{{style}}'
}}

{{! using a singular map hash }}
\{{ui-item {{#if toggledIcon}}icon='{{toggledIcon}}'{{/if}}
    foo='{{foo}}' {{#if toggledSubHeading}}
    bar='{{toggledSubHeading}}'
    map=mapper {{/if}}
    {{#if toggledBadge}}badge={{toggledBadge}}
    {{/if}}style='{{style}}'
}}
        {{/code-block}}
        {{#code-block language='js'}}
// where ...
mapper: {
  title: 'foo',
  subHeading: 'bar'
},
dynamicMoodFunction: function(item) {
  return item.get('title') === 'Monkey' ? 'success' : 'warning';
}
        {{/code-block}}
    </sourcecode>
</examples>
{{! ----------------------------------------------------------- }}
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                Title: <br/>
                {{text-input value=foo width='75%'}}<br/>
                Mood: {{ui-toggle-button value=dynamicMood on='dynamic' off='static' size='tiny'}}<br/>
                {{#if dynamicMood}}
                    <em>
                      Dynamic rule sets mood to 'success' if<br/>
                      title is 'Monkey' otherwise it's 'warning'
                    </em>
                {{else}}
                  {{ui-buttons cardinality='1:1' buttons='default,success,info,warning,error,aged,ancient' value=mood size='tiny' defaultValue='default'}}
                  <br/>
                {{/if}}
                <p>&nbsp;</p>
                State Characteristics:<br/>
                {{ui-toggle-button value=isDisabled size='small'}} - DISABLED  &nbsp;&nbsp;&nbsp;
                {{ui-toggle-button value=isSelected size='small'}} - SELECTED <br/>

            </column>
            <column>
                <div class="row">
                    Toggles<br/>
                    <div class="col-xs-6">
                        {{ui-toggle-button value=showSubHeading size='small'}} - SUB HEAD
                        <p>&nbsp;</p>
                        {{ui-toggle-button value=showImage size='small' defaultValue=false}} - IMAGE <br/>
                    </div>
                    <div class="col-xs-6">
                        {{ui-toggle-button value=showBadge size='small'}} - BADGE   <br/>
                        <p>&nbsp;</p>
                        {{ui-toggle-button value=showIcon size='small'}} - ICON<br/>
                        <p>&nbsp;</p>
                        {{ui-toggle-button value=squeezed size='small' defaultValue=false}} - SQUEEZED <br/>
                    </div>
                </div>
            </column>
            <column>
                Skin / Style Family:<br/>
                {{ui-buttons cardinality='1:1' buttons='default,plus,flat,simple' value=style size='small' stretch=true}}<br/>
                Item Size: <br/>
                {{ui-buttons cardinality='1:1' buttons='tiny,small,default,large,huge' value=size size='small' defaultValue='default'}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ----------------------------------------------------------- }}
<desc>
    Things to note:
    <ul>
      <li>
        Mapping:
        <ul>
          <li>The properties <code>foo</code> and <code>bar</code> are just random property names that came from the input, they have no meaning to <strong>ui-input</strong></li>
          <li>These properties, however, can be mapped to aspects or aspect/pane property names which DO have meaning</li>
          <li>This is achieved by either adding a mapping property 1:1 for each mapping or including a singular <code>map</code> property which provides a hash of mappings.</li>
          <li>Both are illustrated above in the example</li>
        </ul>
      </li>
        <li>there is a CSS property <code>two-lined-message</code> which is turned on when text elements fill two line items (e.g., both 'title' and 'sub-heading' are set); this allows the size of the left most icon to be adjusted based on this property</li>
        <li>left padding is increased for center pane if there is no content in the left-pane, this leverages the <code>with-left</code> and <code>no-left</code> CSS properties</li>
        <li>you can use either <code>style</code> or <code>skin</code> properties for setting the skin/style family as they are aliased to the same root</li>
    </ul>
</desc>